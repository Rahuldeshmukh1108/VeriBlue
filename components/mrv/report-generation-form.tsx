"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"
import { useBlockchain } from "@/hooks/use-blockchain"
import { useIPFS } from "@/hooks/use-ipfs"
import { FileText, Upload, TrendingUp, CheckCircle, Clock } from "lucide-react"

interface ReportData {
  reportingPeriod: string
  carbonSequestration: string
  energyGeneration: string
  waterUsage: string
  biodiversityMetrics: string
  challenges: string
  nextSteps: string
  supportingDocuments: File[]
}

export function ReportGenerationForm({ projectId }: { projectId: string }) {
  const [reportData, setReportData] = useState<ReportData>({
    reportingPeriod: "",
    carbonSequestration: "",
    energyGeneration: "",
    waterUsage: "",
    biodiversityMetrics: "",
    challenges: "",
    nextSteps: "",
    supportingDocuments: [],
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [reportStatus, setReportStatus] = useState<"draft" | "submitted" | "verified">("draft")

  const { success, error } = useToast()
  const { isConnected } = useBlockchain()
  const { uploadToIPFS } = useIPFS()

  const handleInputChange = (field: keyof ReportData, value: string) => {
    setReportData((prev) => ({ ...prev, [field]: value }))
  }

  const handleFileUpload = (files: FileList | null) => {
    if (files) {
      setReportData((prev) => ({
        ...prev,
        supportingDocuments: [...prev.supportingDocuments, ...Array.from(files)],
      }))
    }
  }

  const generateReport = async () => {
    setIsSubmitting(true)
    try {
      await new Promise((resolve) => setTimeout(resolve, 2000))

      // Auto-populate with IoT sensor data
      const autoGeneratedData = {
        carbonSequestration: "2.4 tons CO2 sequestered this period",
        energyGeneration: "1,250 kWh renewable energy generated",
        waterUsage: "850 liters consumed, within sustainable limits",
        biodiversityMetrics: "Biodiversity index improved by 12% this quarter",
      }

      setReportData((prev) => ({
        ...prev,
        ...autoGeneratedData,
      }))

      success("Report Generated", "MRV report auto-generated from IoT sensor data")
    } catch (err) {
      error("Generation Failed", "Failed to generate report from sensor data")
    } finally {
      setIsSubmitting(false)
    }
  }

  const submitReport = async () => {
    if (!isConnected) {
      error("Wallet Required", "Please connect your wallet to submit reports")
      return
    }

    setIsSubmitting(true)
    try {
      const reportMetadata = {
        projectId,
        reportingPeriod: reportData.reportingPeriod,
        timestamp: new Date().toISOString(),
        data: reportData,
        version: "1.0",
      }

      const ipfsHash = await uploadToIPFS(reportMetadata)

      // Simulate blockchain submission
      await new Promise((resolve) => setTimeout(resolve, 3000))

      setReportStatus("submitted")
      success("Report Submitted", `Report uploaded to IPFS: ${ipfsHash}`)
    } catch (err) {
      error("Submission Failed", "Failed to submit report to blockchain")
    } finally {
      setIsSubmitting(false)
    }
  }

  const getStatusBadge = () => {
    switch (reportStatus) {
      case "draft":
        return (
          <Badge variant="outline">
            <Clock className="h-3 w-3 mr-1" />
            Draft
          </Badge>
        )
      case "submitted":
        return (
          <Badge className="bg-blue-100 text-blue-800">
            <Upload className="h-3 w-3 mr-1" />
            Submitted
          </Badge>
        )
      case "verified":
        return (
          <Badge className="bg-green-100 text-green-800">
            <CheckCircle className="h-3 w-3 mr-1" />
            Verified
          </Badge>
        )
    }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center">
                <FileText className="h-5 w-5 mr-2" />
                MRV Report Generation
              </CardTitle>
              <CardDescription>Generate comprehensive monitoring, reporting, and verification reports</CardDescription>
            </div>
            {getStatusBadge()}
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex gap-4">
            <Button onClick={generateReport} disabled={isSubmitting} variant="outline">
              <TrendingUp className="h-4 w-4 mr-2" />
              {isSubmitting ? "Generating..." : "Auto-Generate from IoT Data"}
            </Button>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <Label htmlFor="reportingPeriod">Reporting Period</Label>
                <Input
                  id="reportingPeriod"
                  type="text"
                  placeholder="Q1 2024"
                  value={reportData.reportingPeriod}
                  onChange={(e) => handleInputChange("reportingPeriod", e.target.value)}
                />
              </div>

              <div>
                <Label htmlFor="carbonSequestration">Carbon Sequestration</Label>
                <Textarea
                  id="carbonSequestration"
                  placeholder="Describe carbon sequestration achievements..."
                  value={reportData.carbonSequestration}
                  onChange={(e) => handleInputChange("carbonSequestration", e.target.value)}
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="energyGeneration">Energy Generation</Label>
                <Textarea
                  id="energyGeneration"
                  placeholder="Report on renewable energy generation..."
                  value={reportData.energyGeneration}
                  onChange={(e) => handleInputChange("energyGeneration", e.target.value)}
                  rows={3}
                />
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <Label htmlFor="waterUsage">Water Usage</Label>
                <Textarea
                  id="waterUsage"
                  placeholder="Document water consumption and conservation..."
                  value={reportData.waterUsage}
                  onChange={(e) => handleInputChange("waterUsage", e.target.value)}
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="biodiversityMetrics">Biodiversity Metrics</Label>
                <Textarea
                  id="biodiversityMetrics"
                  placeholder="Report on biodiversity improvements..."
                  value={reportData.biodiversityMetrics}
                  onChange={(e) => handleInputChange("biodiversityMetrics", e.target.value)}
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="supportingDocuments">Supporting Documents</Label>
                <Input
                  id="supportingDocuments"
                  type="file"
                  multiple
                  accept=".pdf,.doc,.docx,.jpg,.png"
                  onChange={(e) => handleFileUpload(e.target.files)}
                />
                {reportData.supportingDocuments.length > 0 && (
                  <div className="mt-2">
                    <p className="text-sm text-muted-foreground">
                      {reportData.supportingDocuments.length} file(s) selected
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <Label htmlFor="challenges">Challenges & Issues</Label>
              <Textarea
                id="challenges"
                placeholder="Document any challenges faced during this period..."
                value={reportData.challenges}
                onChange={(e) => handleInputChange("challenges", e.target.value)}
                rows={3}
              />
            </div>

            <div>
              <Label htmlFor="nextSteps">Next Steps</Label>
              <Textarea
                id="nextSteps"
                placeholder="Outline planned activities for the next period..."
                value={reportData.nextSteps}
                onChange={(e) => handleInputChange("nextSteps", e.target.value)}
                rows={3}
              />
            </div>
          </div>

          <div className="flex gap-4 pt-4 border-t">
            <Button onClick={submitReport} disabled={isSubmitting || reportStatus !== "draft"} className="flex-1">
              <Upload className="h-4 w-4 mr-2" />
              {isSubmitting ? "Submitting..." : "Submit for Verification"}
            </Button>
            <Button variant="outline" disabled={isSubmitting}>
              Save Draft
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Report Preview */}
      {reportData.reportingPeriod && (
        <Card>
          <CardHeader>
            <CardTitle>Report Preview</CardTitle>
            <CardDescription>Preview of your MRV report before submission</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4 text-sm">
              <div>
                <strong>Reporting Period:</strong> {reportData.reportingPeriod}
              </div>
              {reportData.carbonSequestration && (
                <div>
                  <strong>Carbon Sequestration:</strong>
                  <p className="mt-1 text-muted-foreground">{reportData.carbonSequestration}</p>
                </div>
              )}
              {reportData.energyGeneration && (
                <div>
                  <strong>Energy Generation:</strong>
                  <p className="mt-1 text-muted-foreground">{reportData.energyGeneration}</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
